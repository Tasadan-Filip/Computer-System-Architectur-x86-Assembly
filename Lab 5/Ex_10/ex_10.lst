     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    
     9                                  
    10                                  ; Two character strings S1 and S2 are given. Obtain the string D by concatenating the elements of S2 in reverse order and the elements found on even positions in S1.
    11                                  segment data use32 class=data
    12 00000000 2B32326238365838           s1 db '+', '2', '2', 'b', '8', '6', 'X', '8'
    13                                     len_s1 equ $ - s1
    14 00000008 613435                     s2 db 'a', '4', '5'
    15                                     len_s2 equ $ - s2
    16 0000000B 00                         separator db 0
    17 0000000C <res 0000000B>             d resb len_s1 + len_s2
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 BB00000000                      mov ebx, 0 ; ebx whill point to the next free element from string d
    21                                          
    22 00000005 BE[08000000]                    mov esi, s2
    23 0000000A 83C602                          add esi, len_s2 - 1
    24 0000000D B903000000                      mov ecx, len_s2
    25 00000012 FD                              std
    26                                          
    27                                          parse_s2_in_revserse_order:
    28 00000013 AC                                  lodsb ; mov the byte from DS:ESI into AL
    29                                              
    30 00000014 8883[0C000000]                      mov [d + ebx], al
    31 0000001A 43                                  inc ebx
    32                                              
    33 0000001B E2F6                                loop parse_s2_in_revserse_order
    34                                          
    35                                          
    36 0000001D B901000000                      mov ecx, 1
    37                                          parse_s1_on_even_positions:
    38 00000022 83F908                              cmp ecx, len_s1
    39 00000025 7312                                jae fin
    40                                              
    41 00000027 8A81[00000000]                      mov al, [s1 + ecx]
    42 0000002D 8883[0C000000]                      mov [d + ebx], al
    43                                              
    44 00000033 43                                  inc ebx
    45 00000034 83C102                              add ecx, 2
    46 00000037 EBE9                                jmp parse_s1_on_even_positions
    47                                              
    48                                          fin:
    49 00000039 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 0000003B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
