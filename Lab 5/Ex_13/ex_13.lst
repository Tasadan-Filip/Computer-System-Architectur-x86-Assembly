     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               
     8                                  import exit msvcrt.dll   
     9                                  
    10                                  ; A byte string S is given. Obtain the string D1 which contains the elements found on the even positions of S and the string D2 which contains the elements found on the odd positions of S. 
    11                                  ; Observation: the example from mr. Vancea's website has a mistake, which is the first string is with the odd positions and the second one with even, not like in the example
    12                                  segment data use32 class=data
    13 00000000 010503080209                s db 1, 5, 3, 8, 2, 9
    14                                      len_s equ $ - s
    15 00000006 FF                          separator_1 db -1
    16 00000007 <res 00000006>              d1 resb len_s
    17 0000000D FF                          separator_2 db -1
    18 0000000E <res 00000006>              d2 resb len_s
    19                                      
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 B901000000                      mov ecx, 1
    23 00000005 BB00000000                      mov ebx, 0
    24                                          
    25                                          parse_s_on_even_position:
    26 0000000A 83F906                              cmp ecx, len_s
    27 0000000D 7312                                jae fin_of_parsing_for_even
    28                                          
    29 0000000F 8A81[00000000]                      mov al, [s + ecx]
    30 00000015 8883[07000000]                      mov [d1 + ebx], al
    31                                              
    32 0000001B 43                                  inc ebx
    33 0000001C 83C102                              add ecx, 2
    34 0000001F EBE9                                jmp parse_s_on_even_position
    35                                              
    36                                          fin_of_parsing_for_even:
    37                                          
    38 00000021 B900000000                      mov ecx, 0
    39 00000026 BB00000000                      mov ebx, 0
    40                                          
    41                                          parse_s_on_odd_position:
    42 0000002B 83F906                              cmp ecx, len_s
    43 0000002E 7312                                jae fin_of_parsing_for_odd
    44                                          
    45 00000030 8A81[00000000]                      mov al, [s + ecx]
    46 00000036 8883[0E000000]                      mov [d2 + ebx], al
    47                                              
    48 0000003C 43                                  inc ebx
    49 0000003D 83C102                              add ecx, 2
    50 00000040 EBE9                                jmp parse_s_on_odd_position
    51                                              
    52                                          fin_of_parsing_for_odd:
    53                                          
    54 00000042 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000044 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
