     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    
     9                                  
    10                                  ; Two byte strings A and B are given. Obtain the string R that contains only the odd positive elements of the two strings
    11                                  segment data use32 class=data
    12 00000000 020103FD                   a db 2, 1, 3, -3
    13                                     len_a equ $ - a
    14 00000004 0405FB07                   b db 4, 5, -5, 7
    15                                     len_b equ $ - b
    16 00000008 <res 00000008>             r resb len_a + len_b
    17                                     
    18                                     
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 BE[00000000]                    mov esi, a
    22 00000005 BF[08000000]                    mov edi, r
    23                                          
    24 0000000A FC                              cld
    25 0000000B B904000000                      mov ecx, len_a
    26                                          
    27                                          parse_a:
    28 00000010 AC                                  lodsb 
    29                                              
    30 00000011 3C00                                cmp al, 0
    31 00000013 7E05                                jle last_command_of_parse_a
    32                                              
    33 00000015 A801                                test al, 1
    34 00000017 7401                                jz last_command_of_parse_a
    35                                              
    36 00000019 AA                                  stosb
    37                                              
    38                                              last_command_of_parse_a:
    39 0000001A E2F4                                    loop parse_a
    40                                          
    41                                          
    42 0000001C BE[04000000]                    mov esi, b
    43 00000021 B904000000                      mov ecx, len_b
    44                                          
    45                                          parse_b:
    46 00000026 AC                                  lodsb 
    47                                              
    48 00000027 3C00                                cmp al, 0
    49 00000029 7E05                                jle last_command_of_parse_b
    50                                              
    51 0000002B A801                                test al, 1
    52 0000002D 7401                                jz last_command_of_parse_b
    53                                              
    54 0000002F AA                                  stosb
    55                                              
    56                                              last_command_of_parse_b:
    57 00000030 E2F4                                    loop parse_b
    58                                          
    59 00000032 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 00000034 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
