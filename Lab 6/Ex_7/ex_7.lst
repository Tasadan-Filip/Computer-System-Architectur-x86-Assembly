     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    
     9                                  
    10                                  
    11                                  ;A string of doublewords is given. Obtain the list made out of the high bytes of the high words of each doubleword from the given list with the property that these bytes are multiple of 3.
    12                                  segment data use32 class=data
    13 00000000 785634124D3C2B1A76-         s dd 12345678h, 1A2B3C4Dh, 0xFE98DC76
    13 00000009 DC98FE             
    14                                      len_s equ $ - s
    15 0000000C <res 00000003>              d resb len_s / 4
    16 0000000F FF                          separator db 0xFF
    17 00000010 00000000                    aux_number dd 0
    18                                      
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 BE[00000000]                    mov esi, s
    22 00000005 BF[0C000000]                    mov edi, d
    23                                          
    24 0000000A B903000000                      mov ecx, len_s / 4
    25                                          
    26 0000000F FC                              cld
    27                                          
    28                                          parse_s_to_obtain_r:
    29 00000010 AD                                  lodsd ; move the dword from DS:ESI into EAX
    30                                              
    31 00000011 A3[10000000]                        mov dword [aux_number], eax
    32                                              
    33 00000016 66B80000                            mov ax, 0
    34 0000001A A0[13000000]                        mov al, [aux_number + 3]
    35                                              
    36 0000001F 88C2                                mov dl, al ; save the value of the highest bit because we are going to divide ax with 3
    37                                              
    38 00000021 B303                                mov bl, 3 
    39 00000023 F6F3                                div bl ; divide ax with 3 ( the remanider will be in ah)
    40                                              
    41 00000025 80FC00                              cmp ah, 0
    42 00000028 7503                                jne not_multiple_of_3
    43                                              
    44 0000002A 88D0                                mov al, dl
    45 0000002C AA                                  stosb ; move the byte from AL into ES:EDI
    46                                              
    47                                              not_multiple_of_3:
    48 0000002D E2E1                                    loop parse_s_to_obtain_r
    49                                              
    50 0000002F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 00000031 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
