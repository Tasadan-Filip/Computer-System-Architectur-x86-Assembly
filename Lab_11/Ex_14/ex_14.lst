     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, gets, scanf, printf
     8                                  import exit msvcrt.dll    
     9                                  import gets msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  ; Read an integer (positive number) n from keyboard. Then read n sentences containing at least n words (no validation needed).
    13                                  ; Print the string containing the concatenation of the word i of the sentence i, for i=1,n (separated by a space).
    14                                  segment data use32 class=data
    15 00000000 00                          number_of_string db 0
    16 00000001 256400                      format_read_decimal db "%d", 0
    17 00000004 6E3D00                      to_be_printed db "n=", 0
    18 00000007 <res 00000065>              last_red_string resb 101
    19 0000006C <res 0000012F>              result_sentence resb 303
    20 0000019B 257300                      format_print_string db "%s", 0
    21                                  
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 68[04000000]                    push to_be_printed
    25 00000005 FF15[00000000]                  call [printf]
    26 0000000B 83C404                          add esp, 4 * 1
    27                                      
    28 0000000E 68[00000000]                    push number_of_string
    29 00000013 68[01000000]                    push format_read_decimal
    30 00000018 FF15[00000000]                  call [scanf]
    31 0000001E 83C408                          add esp, 4 * 2
    32                                          
    33                                          
    34                                          
    35 00000021 68[07000000]                    push last_red_string
    36 00000026 FF15[00000000]                  call [gets]
    37 0000002C 83C404                          add esp, 4 * 1
    38                                          
    39 0000002F B900000000                      mov ecx, 0
    40 00000034 8A0D[00000000]                  mov cl, [number_of_string]
    41                                          
    42                                          
    43 0000003A BB00000000                      mov ebx, 0
    44 0000003F BF[6C000000]                    mov edi, result_sentence
    45                                          
    46                                          read_strings_loop:
    47 00000044 51                                  push ecx
    48                                              
    49 00000045 68[07000000]                        push last_red_string
    50 0000004A FF15[00000000]                      call [gets]
    51 00000050 83C404                              add esp, 4 * 1
    52                                              
    53 00000053 BA00000000                          mov edx, 0 ; edx will keep count of number of spaces
    54 00000058 BE[07000000]                        mov esi, last_red_string
    55 0000005D FC                                  cld
    56                                              
    57 0000005E 39DA                                cmp edx, ebx
    58 00000060 740E                                je save_word_in_memory
    59                                              
    60                                              loop_in_last_sentence:
    61 00000062 AC                                      lodsb ; move the byte from DS:ESI into AL
    62 00000063 3C20                                    cmp al, ' '
    63 00000065 7402                                    je increse_edx
    64 00000067 EB05                                    jmp final_command_in_loop_last_sentence
    65                                                  
    66                                                  increse_edx:
    67 00000069 42                                          inc edx
    68 0000006A 39DA                                        cmp edx, ebx
    69 0000006C 7402                                        je save_word_in_memory
    70                                                      
    71                                                  final_command_in_loop_last_sentence:
    72 0000006E EBF2                                        jmp loop_in_last_sentence
    73                                              
    74                                              
    75                                              save_word_in_memory:
    76 00000070 AC                                         lodsb ; move the byte from DS:ESI into AL
    77 00000071 3C20                                       cmp al, ' ' 
    78 00000073 7403                                       je end_of_loop
    79 00000075 AA                                         stosb ; move the byte from AL into ES:EDI
    80 00000076 EBF8                                       jmp save_word_in_memory
    81                                                  
    82                                              end_of_loop:
    83 00000078 B020                                    mov al, ' ' 
    84 0000007A AA                                      stosb
    85                                                  
    86 0000007B 43                                      inc ebx
    87 0000007C 59                                      pop ecx
    88 0000007D E2C5                                    loop read_strings_loop
    89                                              
    90 0000007F 68[6C000000]                        push result_sentence
    91 00000084 68[9B010000]                        push format_print_string
    92 00000089 FF15[00000000]                      call [printf]
    93 0000008F 83C408                              add esp, 4 * 2
    94                                          
    95 00000092 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    96 00000094 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
