     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; ((a+b-c)*2 + d-5)*d
    12                                  segment data use32 class=data
    13 00000000 14                          a db 20
    14 00000001 4B                          b db 75
    15 00000002 2D                          c db 45
    16 00000003 6900                        d dw 105
    17                                      
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 A0[00000000]                    mov al, [a]
    23 00000005 0205[01000000]                  add al, [b]
    24 0000000B 2A05[02000000]                  sub al, [c] ; al = (a+b-c)
    25 00000011 B302                            mov bl, 2
    26 00000013 F6E3                            mul bl ; ax = (a+b-c) * 2
    27 00000015 660305[03000000]                add ax, [d] ; ax = (a+b-c) * 2 + d
    28 0000001C 6683E805                        sub ax, 5 ; ax = (a+b-c) * 2 + d - 5
    29 00000020 668B1D[03000000]                mov bx, [d]
    30 00000027 66F7E3                          mul bx ; dx:ax = ((a+b-c) * 2 + d - 5) * d
    31                                          
    32 0000002A 6652                            push dx
    33 0000002C 6650                            push ax
    34 0000002E 58                              pop eax ; eax = ((a+b-c) * 2 + d - 5) * d
    35                                      
    36                                          ; exit(0)
    37 0000002F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    38 00000031 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
