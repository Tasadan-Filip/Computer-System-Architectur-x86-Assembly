     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  ; a,b,c,d-byte, e,f,g,h-word
    11                                  ; [[b*c-(e+f)]/(a+d)
    12                                  
    13                                  segment data use32 class=data
    14 00000000 64                          b db 100
    15 00000001 0A                          c db 10
    16 00000002 F401                        e dw 500
    17 00000004 9001                        f dw 400
    18 00000006 28                          a db 40
    19 00000007 0A                          d db 10
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 A0[00000000]                    mov al, [b]
    25 00000005 F625[01000000]                  mul byte [c]
    26                                          
    27 0000000B 668B1D[02000000]                mov bx, [e]
    28 00000012 66031D[04000000]                add bx, [f]
    29                                          
    30 00000019 6629D8                          sub ax, bx ; ax = [[b*c-(e+f)]
    31                                          
    32 0000001C 8A1D[06000000]                  mov bl, [a]
    33 00000022 021D[07000000]                  add bl, [d] 
    34                                          
    35 00000028 F6F3                            div bl ; [[b*c-(e+f)]/(a+d)
    36                                          
    37                                          ; al = 2
    38                                          
    39                                          
    40                                          
    41                                          
    42                                      
    43                                          ; exit(0)
    44 0000002A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    45 0000002C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
