     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    
     9                                  
    10                                  ; Two byte strings S1 and S2 are given, having the same length. Obtain the string D so that each element of D represents the maximum of the corresponding elements from S1 and S2.  
    11                                  segment data use32 class=data
    12 00000000 010306020307                s1 db 1, 3, 6, 2, 3, 7
    13 00000006 060308010205                s2 db 6, 3, 8, 1, 2, 5
    14                                      len_s equ $ - s2
    15 0000000C <res 00000006>              d resb len_s
    16                                     
    17                                  segment code use32 class=code
    18                                      start:
    19 00000000 BF[0C000000]                    mov edi, d
    20                                          
    21 00000005 B906000000                      mov ecx, len_s
    22 0000000A BB00000000                      mov ebx, 0
    23                                          
    24                                          parse_s1_and_s2_to_obtain_d:
    25                                              
    26 0000000F 8A83[00000000]                      mov al, [s1 + ebx]
    27                                              
    28 00000015 3A83[06000000]                      cmp al, [s2 + ebx]
    29 0000001B 7706                                ja elem_from_s1_is_greater
    30                                              
    31 0000001D 8A83[06000000]                      mov al, [s2 + ebx]
    32                                              
    33                                              elem_from_s1_is_greater:
    34                                                  
    35 00000023 AA                                  stosb
    36                                              
    37 00000024 43                                  inc ebx
    38 00000025 E2E8                                loop parse_s1_and_s2_to_obtain_d
    39                                          
    40                                          
    41 00000027 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    42 00000029 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
